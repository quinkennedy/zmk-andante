#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define L_BT 2
#define L_Q 3
#define L_NUM 4
#define L_SYM 5
#define L_FUNC 6
/ {
  keymap {
    compatible="zmk,keymap";
		MC_layer {
          bindings = <
&lt L_FUNC TAB   &kp SINGLE_QUOTE &kp COMMA        &kp PERIOD    &kp P            &kp Y           &kp F &kp G &kp C &kp R &kp L &kp BACKSPACE
&lt L_NUM ESC    &kp A            &kp O            &kp E         &kp U            &kp I           &kp D &kp H &kp T &kp N &kp S &kp MINUS    
&kp LEFT_SHIFT   &kp SEMICOLON    &kp Q            &kp J         &kp K            &kp X           &kp B &kp M &kp W &kp V &kp Z &kp BACKSLASH
&kp LEFT_CONTROL &kp LEFT_ALT     &kp LEFT_COMMAND &lt L_Q SPACE &lt L_SYM RETURN &lt L_BT DELETE                                            
          >;
        };
		TC_layer {
          bindings = <
&trans &kp DOUBLE_QUOTES &kp LESS_THAN &kp GREATER_THAN &trans &trans &trans &trans &trans &trans &trans &trans        
&trans &trans            &trans        &trans           &trans &trans &trans &trans &trans &trans &trans &kp UNDERSCORE
&trans &kp COLON         &trans        &trans           &trans &trans &trans &trans &trans &trans &trans &kp PIPE      
&trans &trans            &trans        &trans           &trans &trans                                                  
          >;
        };
		L_BT_layer {
          bindings = <
&trans       &trans       &trans       &trans     &trans &trans          &trans &trans &trans &trans &trans &trans
&trans       &trans       &trans       &trans     &trans &trans          &trans &trans &trans &trans &trans &trans
&trans       &trans       &trans       &bt BT_CLR &trans &trans          &trans &trans &trans &trans &trans &trans
&bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &trans     &trans &trans /*L_BT*/                                          
          >;
        };
		L_Q_layer {
          bindings = <
&trans &kp Q  &kp W  &kp E          &kp R  &kp T  &kp Y &kp U &kp I     &kp O      &kp P         &trans          
&trans &kp A  &kp S  &kp D          &kp F  &kp G  &kp H &kp J &kp K     &trans     &kp SEMICOLON &kp SINGLE_QUOTE
&trans &kp Z  &kp X  &kp C          &kp V  &kp B  &kp N &kp M &kp COMMA &kp PERIOD &kp SLASH     &trans          
&trans &trans &trans &trans /*L_Q*/ &trans &trans                                                                
          >;
        };
		L_NUM_layer {
          bindings = <
&trans           &trans         &kp UP_ARROW   &trans          &trans       &trans     &trans &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp MINUS &trans
&trans /*L_NUM*/ &kp LEFT_ARROW &kp DOWN_ARROW &kp RIGHT_ARROW &kp TILDE2   &trans     &trans &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp PLUS  &trans
&trans           &trans         &trans         &trans          &trans       &trans     &trans &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp EQUAL &trans
&trans           &trans         &trans         &trans          &kp NUMBER_0 &kp PERIOD                                                               
          >;
        };
		L_SYM_layer {
          bindings = <
&trans &trans      &trans &trans          &kp PERCENT      &trans &trans     &trans   &kp CARET &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &trans
&trans &kp AT_SIGN &trans &kp EXCLAMATION &trans           &trans &kp DOLLAR &kp HASH &trans    &kp AMPERSAND        &kp ASTERISK          &trans
&trans &trans      &trans &trans          &trans           &trans &trans     &trans   &trans    &trans               &trans                &trans
&trans &trans      &trans &trans          &trans /*L_SYM*/ &trans                                                                                
          >;
        };
		L_FUNC_layer {
          bindings = <
&trans /*L_FUNC*/ &trans &trans &trans &trans &trans &kp F12 &kp F7 &kp F8 &kp F9 &trans         &trans         
&trans            &trans &trans &trans &trans &trans &kp F11 &kp F4 &kp F5 &kp F6 &kp LEFT_BRACE &kp RIGHT_BRACE
&trans            &trans &trans &trans &trans &trans &kp F10 &kp F1 &kp F2 &kp F3 &trans         &trans         
&trans            &trans &trans &trans &trans &trans                                                            
          >;
        };
  };
};
